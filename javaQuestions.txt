1. WHat is interpreter
Ans: The software by which the conversion of the high-level instructions is performed line-by-line to machine-level language, other than compiler and assembler, is known as INTERPRETER. 
    The Interpreter does not save the Machine Language.

2. What is a compiler
Ans: A compiler translates code from a high-level programming language into machine code before the program runs
    The compiler saves the Machine Language in form of Machine Code on disks.

3. WHat is assembler
ans: Assembler converts the assembly code into the machine code.

4. java vs c++
ans: java is platform independent wherease C++ is platform dependent
    java can run on any os so it is portable whereas c++ is not portable
    memory management in java is system controlled whereas in C++ it is manual
    java does not support pointers , c++ supports pointers
    java does not have virtual keyword, whereas c++ has virtual keyword
    java supports call by value whereas c++ supports both call by value and call by reference

5. What is JVM
Ans: JVM (Java Virtual Machine) is an abstract machine. It is a specification that provides runtime environment in which java bytecode can be executed.
    JVM is the one that actually calls the main method present in a Java code. JVM is a part of JRE(Java Runtime Environment).
    JVM is an interpreter. Compiler converts the source code into byte code.

6. What is garbage collection in java?
Ans: Garbage collection in Java is the process by which Java programs perform automatic memory management.
    Java programs compile to bytecode that can be run on a Java Virtual Machine, or JVM for short.
    When Java programs run on the JVM, objects are created on the heap, which is a portion of memory dedicated to the program.
    Eventually, some objects will no longer be needed. The garbage collector finds these unused objects and deletes them to free up memory.

7. Is java platform independent?
Ans: Yes, Java is a Platform Independent language. Unlike many programming languages javac compiler compiles the program to form a bytecode or .class file.
    This file is independent of the software or hardware running but needs a JVM(Java Virtual Machine) file preinstalled in the operating system for further execution of the bytecode.
    Although JVM is platform dependent, the bytecode can be created on any System and can be executed in any other system despite hardware or software being used which makes Java platform independent.

8. Features of Java
Ans: Platform Independent,portable,object oriented,secured,distributed,multi-threaded.

9. What is JIT?
Ans: It is a part of JRE . JIT is responsible for compiling the bytecode into native machine code.

10. Memory storages availabe with JVM?
ans: Classloader,heap,stack,programcounter.

11. What is Classloader?
ans: It is a part of JRE. During the execution of byte code created , Classloader is responsible for dynamically lodaing the java classes and interfaces to jvm.

12. Difference between JRE,JDK,JVM
Ans: JVM is a type of interpreter responsible for converting bytecode into machine-readable code.
    JRE stands for Java Runtime Environment, it is an installation package that provides an environment to run the Java program or application on any machine.
    JDK stands for Java Development Kit which provides the environment to develop and execute Java programs.

13. What is Java String Pool?
Ans: A Java String Pool is a place in heap memory where all the strings defined in the program are stored. 
    Whenever we create a new string object, JVM checks for the presence of the object in the String pool, If String is available in the pool, the same object reference is shared with the variable, else a new object is created.

14. What will happen if we declare don’t declare the main as static?
Ans: We can declare the main method without using static and without getting any errors.
    But, the main method will not be treated as the entry point to the application or the program.

15. What is the Wrapper class in Java?
Ans: Wrapper, in general, is referred to a larger entity that encapsulates a smaller entity.
    Here in Java, the wrapper class is an object class that encapsulates the primitive data types. 
    Wrapper classes are final and immutable
    Provides methods like valueOf(), parseInt(), etc.

16. Voltaile Keyword in java
Ans: Volatile keyword is used to modify the value of a variable by different threads.
    It is also used to make classes thread safe.
    It means that multiple threads can use a method and instance of the classes at the same time without any problem. 

17. Difference between local and instance variable
Ans: Local variables are defined in the method and scope of the variable that exist inside the method itself.
    Instance variable is defined inside the class and outside the method and the scope of the variables exist throughout the class.

18. StringBuffer vs Stringbuilder
Ans: StringBuffer provides functionality to work with the strings. It is thread safe. It is synchronized
    Stringbuilder is a class used to build a mutuable string. It is not thread safe . It is non=synchronized and faster.

19. Static method vs instance method.
ans: Static method is associated with a class rather than an object.
    The instance method is associated with an object rather than a class.
    Static methods can be called using the class name only without creating an instance of a class.
    The instance method can be called on a specific instance of a class using the object reference.

20. What is an Interface?
Ans: An interface in Java is a collection of static final variables and abstract methods that define the contract or agreement for a set of linked classes

21. Can we override static and private members?
Ans: No, as static methods are part of the class rather than the object so we can’t override them.

22. Enum in Java
Ans: An enum is a type that can hold a fixed set of constant values. Each constant is an instance of the enum type.
    Enums are used when you need to represent a fixed set of constants, such as days of the week, directions, or states in a finite state machine.
    They provide type safety, ensuring that variables of the enum type can only hold one of the predefined constants.

23. Final keyword in java
Ans: FInal keyword does not allows user to redefine a variable value, override a function, exttends a class

24. Static Keyword
Ans: A static variable (also known as a class variable) is a variable that belongs to the class rather than to instances of the class. 
    Static variables can be accessed directly using the class name, without needing to create an instance of the class.

25. immutable classes in java
Ans: In Java, an immutable class is a class whose instances cannot be modified after they are created.
    Once an immutable object is created, its state (i.e., its data) cannot be changed.
    Immutable classes offer several advantages, including thread safety, simplification of concurrent programming, and reliability.
