Q: What exactly is a distributed version control system?
Ans: A distributed version control system (DVCS) brings a local copy of the complete repository to every team member’s computer, so they can commit, branch, and merge locally. 
The server doesn’t have to store a physical file for each branch — it just needs the differences between each commit.
Distributed source code management systems, such as Git, Mercurial, and Bazaar, mirror the repository and its entire history as a local copy on individual hard drives.
Distributed version control systems help software development teams create strong workflows and hierarchies, with each developer pushing code changes to their own repository and maintainers setting a code review process to ensure only quality code merges into the main repository.

Advantages:
1. Reliable Backup Copies
2. flexible branching
3. Flexibility to work offline (except pushing and pulling)
4. Pull request feature

Q: What is a version control system?
Ans: A VCS keeps track of the contributions of the developers working as a team on the projects. 
    They maintain the history of code changes done and with project evolution, it gives an upper hand to the developers to introduce new code, fixes bugs, and run tests with confidence that their previously working copy could be restored at any moment in case things go wrong.

Q: What is a git repository
Ans: A repository is a file structure where git stores all the project-based files. Git can either stores the files on the local or the remote repository.

Q: what does Git clone do?
Ans: Clone an existing repository present at a remote location to location.

Q: What does git config do?
Ans: Setup configuration options for defining the behaviour of repo , user info and preferences.
    e.g. to setup name : git config --global "hemang"

Q: Head in terms of git and how many heads can be present in a repository?
Ans: A head is nothing but a reference to the last commit.
    For every repository, there will always be a default head referred to as “master” or now “main” (as per GitHub) but there is no restriction to the count of heads available.
    For e.g.: To checkout one commit before the latest commit : git checkout HEAD~1
    To uncommit the last 3 commits without losing changes: git reset HEAD~3
    To uncommit the last 3 commits with losing changes: git reset --hard HEAD~3
    To look into the changes made in the last 3 commits, we can run : git diff HEAD~3

Q. What does git status command do?
Ans: git status command is used for showing the difference between the working directory and the index which is helpful for understanding git in-depth and also keep track of the tracked and non-tracked changes

Q.Define “Index”.
Ans: Before making commits to the changes done, the developer is given provision to format and review the files and make innovations to them. All these are done in the common area which is known as ‘Index’ or ‘Staging Area’

Q: Git add
Ans: It adds all the changes in directory or sub directory in to the staging area.

Q: Create a git repo
Ans: git init 

Q: Git stash
Ans: Git stash can be used in cases where we need to switch in between branches and at the same time not wanting to lose edits in the current branch.
    Running the git stash command basically pushes the current working directory state and index to the stack for future use and thereby providing a clean working directory

Q: delete a brach command
ans: git branch -d [head] , git branch -d <local_brach_name>
    To delete a branch remotely git push origin --delete <remote_brach_name>

Q: git remote
Ans: git remote command creates an entry in  git config that specifies a name for a particular URL

Q: git stash apply
Ans: git stash apply command is used for bringing the works back to the working directory from the stack where the changes were stashed using git stash command.

Q: git pull
ans: This command pulls new changes from the currently working branch located in the remote central repository.
    git pull=git fetch+git merge

Q: git fetch
Ans: Pulls all commits and changes from desired branch and stores them in a new branch of the local repository. 
    For changes to be reflected in the current / target branch, git fetch should be followed by git merge command.
    Git pull and git fetch both copy changes from the remote GitHub or GitLab repository to your local Git repo, but git fetch does not update your working directory while git pull does.
    Changes fetched from git fetch command are stored in remote tracking branches present in refs/remotes/ namespaces

Q: Git vs GitHub
Ans: Git is a version control system installed on local system maintained by linux foundation which allows user to collaborate on a project
    Github is a cloud based source code repository developer by using git.
    GIthub is a developer platform that alloes users to create , manage and share their code.

Q: Git diff vs git status
Ans: git diff shows the changes between commits, working trees etc.
    git status shows the difference between working directory and index.

Q: WHat consists of git commit object?
ans: a set of files represents the state of a project at a time
    reference to parent commit objects.
    a 40 character string termed as Sha-1 name uniquely identifies the commit object

Q. What is the difference between git stash apply vs git stash pop command?
Ans:git stash pop command throws away the specified stash (topmost stash by default) after applying it.
    git stash apply command leaves the stash in the stash list for future reuse. In case we wanted to remove it from the list, we can use the git stash drop command.
    git stash pop = git stash apply + git stash drop

Q: How will you resolve conflict in Git?
Ans: Following are the steps are done in order to resolve git conflicts:
    1. Identify the files that have conflicts.
    2. Discuss with members who have worked on the file and ensure that the required changes are done in the file.
    3. Add these files to the staged section by using the git add command.
    4. Commit these changes using the git commit command.
    5. Finally, push the changes to the branch using the git.

Q: Git cherry pick
Ans: This command is used to introduce certain commits from one branch onto another branch within the repository. 
    The most common use case is when we want to forward- or back-port commits from the maintenance branch to the development branch

Q: Removing a file from stage/index area without removing from local
Ans: git rm -> removes from both stage and local
    git reset HEAD-> remove files from stage area
    git reset HEAD example.txt -> removes example.txt file from stage area

Q: Git merge vs git rebase
Ans: Suppose we have two commits in brach main A->B , now user cuts a branch from commit b and makes a new branch and this new branch now has three commits c,d,e
    when user types git merge then a new commit is created which is f in main branch and all the changes from b and from commit e gets merged in this commit f.
    when user types git rebase then user is rebasing the main branch commit b to the brach's commit number c.


Q: git revert vs git reset
Ans: git revert is used for creating a new commit that undoes the changes of the previous commit.
    git revert <commit-hash>
    git reset is used  To move the current branch’s HEAD to a specified commit and optionally modify the staging area and working directory to match this commit.
    git reset --soft <commit-hash>
    Moves HEAD to a specified commit but keeps changes in the staging area and working directory.

Q: git log
Ans: To check the commits history