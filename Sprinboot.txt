1. @SpringBootApplication
The @SpringBootApplication annotation is a prominent class of multiple annotations that combines three other Spring Boot annotations, such as @ComponentScan, @Configuration, and @EnableAutoConfiguration. 
It is placed in the root package and a meta-annotation of the application.
@SpringBootApplication allows you to simplify the configuration of the Spring application. 

2. @Configuration
The @Configuration is a class-based annotation that defines one or more bean methods in the class.
The purpose of a configuration class is to indicate the application context, like service and other application components.
As a result, developers can create highly flexible and efficient applications that can adapt to requirement changes quickly.

3. @PathVariable
The @PathVariable is used to measure dynamic parameters from the request URI and map them to method parameters in a controller.
The annotation helps develop RESTful web services, allowing you to manage variable parameters.

4. RequestBody
In web applications, @RequestBody indicates a method parameter that binds the HTTP request body in the controller method.
The requestâ€™s body is mapped when users send requests to the server.

5. @Autowired
In SpringBoot annotation, @Autowired is used to inject the dependency of one bean into another. 
The spring-managed object is implemented into another object that a class needs to perform.

6. @RestController
The @RestController combines the functionality of @Respondbody and @Controller annotations.
The annotation makes creating RESTful endpoints that return XML, JSON, and other types of responses easier.

7. @Bean
The @Bean is a method-level annotation widely used in Spring Boot applications. 
Bean annotation is a direct analog of the XML element, which indicates that the Spring container should register a method.
Spring bean annotations are the objects that can be injected into other components or other beans.

8. @EnableAutoConfiguration
The annotation allows the automatic configuration of your Spring Boot applications. 
Enable Auto Configuration annotations to define the Spring components and configure them automatically.
The autoconfigured beans are present in the classpath and make developer work simpler by providing the required beans from the classpath and configuring it to run the applications. 

9. @Components
The @Components is used to mark the Java class in the Spring applications.
The Spring IoC container manages the component annotations and is responsible for the lifecycle of the components, such as initializing, creating, or destroying them.

10. @Repository
The @Repository annotation is used to interact with different databases, such as NoSQL databases and relational databases.
Also, when a Java class is marked with @Repository annotation, Spring Boot automatically creates and adds the required context.